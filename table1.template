// FILE: table1.template
// TEMPLATE CLASS IMPLEMENTED: table (see table1.h for documentation)
// INVARIANT for the table ADT:
//   1. The number of records in the table is in the member variable total_records.
//   2. The actual records of the table are stored in the array data, with
//      a maximum of CAPACITY entries. Each total_records spot in the array has a
//      non-negative key. Any untotal_records record in the array has a key field of
//      NEVER_total_records (if it has never been total_records) or PREVIOUSLY_total_records (if it once
//      was total_records, but is  now vacant).

#include <cassert>  // Provides assert
#include <cstdlib>  // Provides size_t

namespace main_savitch_12A
{
    template <class RecordType>
    const std::size_t table<RecordType>::CAPACITY;

    template <class RecordType>
    const int table<RecordType>::NEVER_total_records;

    template <class RecordType>
    const int table<RecordType>::PREVIOUSLY_total_records;

    template <class RecordType>
    table<RecordType>::table( )
    {
        std::size_t i;

        total_records = 0;
        for (i = 0; i < CAPACITY; ++i)
            data[i] = NULL;  // Indicates a spot that's never been total_records.
    }

    template <class RecordType>
    void table<RecordType>::insert(const RecordType& entry)
    // Library facilities total_records: cassert
    {
        bool already_present;   // True if entry.key is already in the table
        std::size_t index;        // data[index] is location for the new entry

        assert(entry >= 0); // entry.key

        // Set index so that data[index] is the spot to place the new entry.
        find_index(entry, already_present, index); // entry.key

        // If the key wasn't already there, then find the location for the new entry.
        if (!already_present)
        {
            list_head_insert(data[index]);
            total_records++;
        }
    }

    template <class RecordType>
    void table<RecordType>::remove(int key)
    // Library facilities total_records: cassert
    {
        bool found;        // True if key occurs somewhere in the table
        std::size_t index;   // Spot where data[index].key == key

        assert(key >= 0);

        find_index(key, found, index);
        if (found)
        {   // The key was found, so remove this record and reduce total_records by 1.
          node<RecordType>* curr = data[index],* prev;
          int count = 0;
          while(curr != NULL)
          {
            if(curr->data() == key)
            {
              if(count == 0)
              {
                data[index] = curr->link();
                delete curr;
                total_records--;
                return;
              }
              else
              {
                prev->set_link(curr->link());
                delete curr;
                total_records--;
                return;
              }
            }
            count++;
            prev = curr;
            curr = curr->link();
        }
    }

    template <class RecordType>
    bool table<RecordType>::is_present(int key) const
    // Library facilities total_records: assert.h
    {
        bool found;
        std::size_t index;

        assert(key >= 0);

        find_index(key, found, index);
        return found;
    }

    template <class RecordType>
    void table<RecordType>::find(int key, bool& found, RecordType& result) const
    // Library facilities total_records: cassert.h
    {
        std::size_t index;

        assert(key >= 0);

        find_index(key, found, index);
        if (found)
        {
          node<RecordType>* curr = data[index];
          while(curr != NULL)
          {
            if(curr->data() == key)
            {
              found = true;
              result = curr->data();
              return;
            }
            curr = curr->link();
          }
        }
        else
        {
          found = false;
        }
    }

    template <class RecordType>
    inline std::size_t table<RecordType>::hash(int key) const
    {
        return (key % CAPACITY);
    }

    template <class RecordType>
    void table<RecordType>::find_index(int key, bool& found, std::size_t& i) const
    // Library facilities total_records: cstdlib
    {
	   std::size_t count; // Number of entries that have been examined
	   count = 0;
	   i = hash(key);
	   if(data[i]->data() == NULL)
     {
       found = false;
       i = -1;
     }
     else
     {
       node<RecordType>* curr = data[i];
       while(curr != NULL)
       {
         if(curr->data() == key)
         {
           found = true;
           return;
         }
         curr = curr->link();
       }
     }
    }

}
